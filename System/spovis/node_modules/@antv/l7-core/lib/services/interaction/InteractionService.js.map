{"version":3,"sources":["../../../src/services/interaction/InteractionService.ts"],"names":["InteractionService","TYPES","IMapService","ILogService","hammertime","lastClickTime","lastClickXY","clickTimer","onHover","x","y","type","$containter","mapService","getMapContainer","getBoundingClientRect","top","left","lngLat","containerToLngLat","nowTime","Date","getTime","Math","abs","clearTimeout","emit","InteractionEvent","Hover","setTimeout","addEventListenerOnMap","destroy","removeEventListenerOnMap","off","id","Select","featureId","Active","Hammer","get","set","direction","DIRECTION_ALL","enable","addEventListener","logger","debug","removeEventListener","EventEmitter"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport Hammer from 'hammerjs';\nimport { inject, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport { ILogService } from '../log/ILogService';\nimport { IMapService } from '../map/IMapService';\nimport { IInteractionService, InteractionEvent } from './IInteractionService';\n/**\n * 由于目前 L7 与地图结合的方案为双 canvas 而非共享 WebGL Context，事件监听注册在地图底图上。\n * 除此之外，后续如果支持非地图场景，事件监听就需要注册在 L7 canvas 上。\n */\n@injectable()\nexport default class InteractionService extends EventEmitter\n  implements IInteractionService {\n  @inject(TYPES.IMapService)\n  private readonly mapService: IMapService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  private hammertime: HammerManager;\n\n  private lastClickTime: number = 0;\n\n  private lastClickXY: number[] = [-1, -1];\n\n  private clickTimer: number;\n\n  public init() {\n    // 注册事件在地图底图上\n    this.addEventListenerOnMap();\n  }\n\n  public destroy() {\n    if (this.hammertime) {\n      this.hammertime.destroy();\n    }\n    this.removeEventListenerOnMap();\n    this.off(InteractionEvent.Hover);\n  }\n\n  public triggerHover({ x, y }: { x: number; y: number }) {\n    this.emit(InteractionEvent.Hover, { x, y });\n  }\n  public triggerSelect(id: number): void {\n    this.emit(InteractionEvent.Select, { featureId: id });\n  }\n\n  public triggerActive(id: number): void {\n    this.emit(InteractionEvent.Active, { featureId: id });\n  }\n\n  private addEventListenerOnMap() {\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      const hammertime = new Hammer($containter);\n      hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL });\n      hammertime.get('pinch').set({ enable: true });\n\n      // hammertime.on('panstart', this.onPanstart);\n      // hammertime.on('panmove', this.onPanmove);\n      // hammertime.on('panend', this.onPanend);\n      // hammertime.on('pinch', this.onPinch);\n      $containter.addEventListener('mousemove', this.onHover);\n      $containter.addEventListener('click', this.onHover);\n      $containter.addEventListener('mousedown', this.onHover);\n      $containter.addEventListener('mouseup', this.onHover);\n      // $containter.addEventListener('dblclick', this.onHover);\n      $containter.addEventListener('contextmenu', this.onHover);\n\n      this.hammertime = hammertime;\n\n      // TODO: 根据场景注册事件到 L7 canvas 上\n      this.logger.debug('add event listeners on canvas');\n    }\n  }\n  private removeEventListenerOnMap() {\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      $containter.removeEventListener('mousemove', this.onHover);\n      $containter.removeEventListener('click', this.onHover);\n      $containter.removeEventListener('mousedown', this.onHover);\n      $containter.removeEventListener('mouseup', this.onHover);\n      // $containter.removeEventListener('dblclick', this.onHover);\n      $containter.removeEventListener('contextmenu', this.onHover);\n    }\n  }\n\n  private onHover = ({ x, y, type }: MouseEvent) => {\n    const $containter = this.mapService.getMapContainer();\n    if ($containter) {\n      const { top, left } = $containter.getBoundingClientRect();\n      x -= left;\n      y -= top;\n    }\n    const lngLat = this.mapService.containerToLngLat([x, y]);\n\n    if (type === 'click') {\n      const nowTime = new Date().getTime();\n      if (\n        nowTime - this.lastClickTime < 500 &&\n        Math.abs(this.lastClickXY[0] - x) < 10 &&\n        Math.abs(this.lastClickXY[1] - y) < 10\n      ) {\n        this.lastClickTime = 0;\n        this.lastClickXY = [-1, -1];\n        if (this.clickTimer) {\n          clearTimeout(this.clickTimer);\n        }\n        type = 'dblclick';\n        this.emit(InteractionEvent.Hover, { x, y, lngLat, type });\n      } else {\n        this.lastClickTime = nowTime;\n        this.lastClickXY = [x, y];\n        // @ts-ignore\n        this.clickTimer = setTimeout(() => {\n          type = 'click';\n          this.emit(InteractionEvent.Hover, { x, y, lngLat, type });\n        }, 500);\n      }\n      return;\n    }\n\n    this.emit(InteractionEvent.Hover, { x, y, lngLat, type });\n  };\n}\n"],"file":"InteractionService.js"}